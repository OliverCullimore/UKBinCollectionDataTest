{"uid":"f027b1c8c97a4530","name":"Validate Council Output [LisburnCastlereaghCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"275289351e7211a486c45f3b8d1a8950","time":{"start":1689717299451,"stop":1689717300113,"duration":662},"status":"failed","statusMessage":"TypeError: find_longest_match() missing 4 required positional arguments: 'alo', 'ahi', 'blo', and 'bhi'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa239cf39d0>\nrequest = <FixtureRequest for <Function test_scenario_outline[LisburnCastlereaghCityCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa24642f400>, 'council': 'LisburnCastlereaghCityCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:60: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:56: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:24: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LisburnCastlereaghCityCouncil.CouncilClass object at 0x7fa236192160>\npage = ''\nkwargs = {'paon': '97', 'postcode': 'BT28 1JN', 'uprn': None, 'usrn': None}\npostcode = 'BT28 1JN', paon = '97'\nsearch_url = 'https://lisburn.isl-fusion.com/address/BT28 1JN'\ns = <requests.sessions.Session object at 0x7fa2361920d0>\nresponse = <Response [200]>\naddress_data = {'html': '\\n            \\n        <ul class=\"list-unstyled\">\\n                    <li><a href=\"/view/oL8uW9WtK3Bdf7Q2/...JfciT98/\">97 HILLSBOROUGH ROAD, LISBURN. BT28 1JN</a></li>\\n                </ul>\\n        ', 'searchtext': 'bt28 1jn'}\naddress_list = '\\n            \\n        <ul class=\"list-unstyled\">\\n                    <li><a href=\"/view/oL8uW9WtK3Bdf7Q2/\">69 HILL...li><a href=\"/view/dWc73KrzgJfciT98/\">97 HILLSBOROUGH ROAD, LISBURN. BT28 1JN</a></li>\\n                </ul>\\n        '\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        \"\"\"\n        This function will make a request to the search endpoint with the postcode, extract the\n        house numbers from the responses, then retrieve the ID of the entry with the house number that matches,\n        to then retrieve the bin schedule.\n    \n        The API here is a weird combination of HTML in json responses.\n        \"\"\"\n        postcode = kwargs.get(\"postcode\")\n        paon = kwargs.get(\"paon\")\n    \n        if not postcode:\n            raise ValueError(\"Must provide a postcode\")\n    \n        if not paon:\n            raise ValueError(\"Must provide a house number\")\n    \n        search_url = f\"{self.base_url}/address/{postcode}\"\n    \n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        response = s.get(search_url)\n        response.raise_for_status()\n    \n        address_data = response.json()\n    \n        address_list = address_data[\"html\"]\n    \n        soup = BeautifulSoup(address_list, features=\"html.parser\")\n    \n        address_by_id = {}\n    \n        for li in soup.find_all(\"li\"):\n            link = li.find_all(\"a\")[0]\n            address_id = link.attrs[\"href\"]\n            address = link.text\n    \n            address_by_id[address_id] = address\n    \n        addresses = list(address_by_id.values())\n    \n>       common = difflib.SequenceMatcher(\n            a=addresses[0], b=addresses[1]\n        ).find_longest_match()\nE       TypeError: find_longest_match() missing 4 required positional arguments: 'alo', 'ahi', 'blo', and 'bhi'\n\nuk_bin_collection/uk_bin_collection/councils/LisburnCastlereaghCityCouncil.py:62: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"TypeError: find_longest_match() missing 4 required positional arguments: 'alo', 'ahi', 'blo', and 'bhi'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa239cf39d0>\nrequest = <FixtureRequest for <Function test_scenario_outline[LisburnCastlereaghCityCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa24642f400>, 'council': 'LisburnCastlereaghCityCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:60: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:56: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:24: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LisburnCastlereaghCityCouncil.CouncilClass object at 0x7fa236192160>\npage = ''\nkwargs = {'paon': '97', 'postcode': 'BT28 1JN', 'uprn': None, 'usrn': None}\npostcode = 'BT28 1JN', paon = '97'\nsearch_url = 'https://lisburn.isl-fusion.com/address/BT28 1JN'\ns = <requests.sessions.Session object at 0x7fa2361920d0>\nresponse = <Response [200]>\naddress_data = {'html': '\\n            \\n        <ul class=\"list-unstyled\">\\n                    <li><a href=\"/view/oL8uW9WtK3Bdf7Q2/...JfciT98/\">97 HILLSBOROUGH ROAD, LISBURN. BT28 1JN</a></li>\\n                </ul>\\n        ', 'searchtext': 'bt28 1jn'}\naddress_list = '\\n            \\n        <ul class=\"list-unstyled\">\\n                    <li><a href=\"/view/oL8uW9WtK3Bdf7Q2/\">69 HILL...li><a href=\"/view/dWc73KrzgJfciT98/\">97 HILLSBOROUGH ROAD, LISBURN. BT28 1JN</a></li>\\n                </ul>\\n        '\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        \"\"\"\n        This function will make a request to the search endpoint with the postcode, extract the\n        house numbers from the responses, then retrieve the ID of the entry with the house number that matches,\n        to then retrieve the bin schedule.\n    \n        The API here is a weird combination of HTML in json responses.\n        \"\"\"\n        postcode = kwargs.get(\"postcode\")\n        paon = kwargs.get(\"paon\")\n    \n        if not postcode:\n            raise ValueError(\"Must provide a postcode\")\n    \n        if not paon:\n            raise ValueError(\"Must provide a house number\")\n    \n        search_url = f\"{self.base_url}/address/{postcode}\"\n    \n        requests.packages.urllib3.disable_warnings()\n        s = requests.Session()\n        response = s.get(search_url)\n        response.raise_for_status()\n    \n        address_data = response.json()\n    \n        address_list = address_data[\"html\"]\n    \n        soup = BeautifulSoup(address_list, features=\"html.parser\")\n    \n        address_by_id = {}\n    \n        for li in soup.find_all(\"li\"):\n            link = li.find_all(\"a\")[0]\n            address_id = link.attrs[\"href\"]\n            address = link.text\n    \n            address_by_id[address_id] = address\n    \n        addresses = list(address_by_id.values())\n    \n>       common = difflib.SequenceMatcher(\n            a=addresses[0], b=addresses[1]\n        ).find_longest_match()\nE       TypeError: find_longest_match() missing 4 required positional arguments: 'alo', 'ahi', 'blo', and 'bhi'\n\nuk_bin_collection/uk_bin_collection/councils/LisburnCastlereaghCityCouncil.py:62: TypeError","steps":[{"name":"Given the council: LisburnCastlereaghCityCouncil","time":{"start":1689717299452,"stop":1689717299452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from LisburnCastlereaghCityCouncil","time":{"start":1689717299452,"stop":1689717300113,"duration":661},"status":"failed","statusMessage":"find_longest_match() missing 4 required positional arguments: 'alo', 'ahi', 'blo', and 'bhi'","statusTrace":"TypeError: find_longest_match() missing 4 required positional arguments: 'alo', 'ahi', 'blo', and 'bhi'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az465-491"},{"name":"thread","value":"2680-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LisburnCastlereaghCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"2f2cbbcb67709690","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.8/803//#testresult/2f2cbbcb67709690","status":"failed","statusDetails":"TypeError: find_longest_match() missing 4 required positional arguments: 'alo', 'ahi', 'blo', and 'bhi'","time":{"start":1689547704629,"stop":1689547705281,"duration":652}}]},"tags":[]},"source":"f027b1c8c97a4530.json","parameterValues":["LisburnCastlereaghCityCouncil"]}