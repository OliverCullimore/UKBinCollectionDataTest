{"uid":"364cce0388d10593","name":"Validate Council Output [SwaleBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"af246d65f1eea891cf11ee497308965a","time":{"start":1689703898721,"stop":1689703901570,"duration":2849},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f85c23458b0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SwaleBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f85c0946040>, 'council': 'SwaleBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:60: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:56: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:24: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SwaleBoroughCouncil.CouncilClass object at 0x7f85c0951f70>, page = ''\nkwargs = {'paon': None, 'postcode': 'ME12 2NQ', 'uprn': '100061081168', 'usrn': None}\nuser_postcode = 'ME12 2NQ', user_uprn = '100061081168'\ncouncil_url = 'https://swale.gov.uk/bins-littering-and-the-environment/bins/collection-days?postcode=ME12+2NQ&addresses=100061081168&address-submit='\nresponse = <Response [200]>\nsoup = <!--// Edit plus -->\n<!--// Edit plus end -->\n<!DOCTYPE html>\n\n<html lang=\"en-gb\" xmlns=\"http://www.w3.org/1999/xhtml\"...    //--> End cookies\n               \n            });\n        </script>\n<!--// EU Cookie banner end -->\n</body>\n</html>\ndata = {'bins': []}\nform_area = <form autocomplete=\"off\" class=\"integration bin-lookup\" method=\"GET\" name=\"bin-collection-form\">\n<fieldset id=\"tab1\">\n...e=\"change-postcode\" type=\"submit\" value=\"Try another post code\">try another post code</button>.</p> </fieldset>\n</form>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Get postcode and UPRN from kwargs\n        user_postcode = kwargs.get(\"postcode\")\n        user_uprn = kwargs.get(\"uprn\")\n        check_postcode(user_postcode)\n        check_uprn(user_uprn)\n    \n        # Build URL to parse\n        council_url = f\"https://swale.gov.uk/bins-littering-and-the-environment/bins/collection-days?postcode={user_postcode.replace(' ', '+')}&addresses={user_uprn}&address-submit=\"\n    \n        # Parse URL and read if connection successful\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(council_url)\n        if response.status_code == 200:\n            soup = BeautifulSoup(response.text, features=\"html.parser\")\n            soup.prettify()\n        else:\n            raise ConnectionAbortedError(\"Could not parse council website.\")\n    \n        data = {\"bins\": []}\n    \n        # Get the collection bullet points on the page and parse them\n        form_area = soup.find(\"form\", {\"class\": \"integration bin-lookup\"})\n        collections = [\n            item.text.strip().split(\",\") for item in form_area.find_all(\"li\")\n        ]\n        for c in collections:\n            bin_type = c[0].strip()\n            # temp_date = c[2].strip() + \" \" + str(datetime.now().year)\n            bin_date = datetime.strptime(\n>               c[2].strip() + \" \" + str(datetime.now().year), \"%d %B %Y\"\n            ).strftime(date_format)\nE           IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/SwaleBoroughCouncil.py:48: IndexError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f85c23458b0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SwaleBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f85c0946040>, 'council': 'SwaleBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:60: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:56: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:76: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:24: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SwaleBoroughCouncil.CouncilClass object at 0x7f85c0951f70>, page = ''\nkwargs = {'paon': None, 'postcode': 'ME12 2NQ', 'uprn': '100061081168', 'usrn': None}\nuser_postcode = 'ME12 2NQ', user_uprn = '100061081168'\ncouncil_url = 'https://swale.gov.uk/bins-littering-and-the-environment/bins/collection-days?postcode=ME12+2NQ&addresses=100061081168&address-submit='\nresponse = <Response [200]>\nsoup = <!--// Edit plus -->\n<!--// Edit plus end -->\n<!DOCTYPE html>\n\n<html lang=\"en-gb\" xmlns=\"http://www.w3.org/1999/xhtml\"...    //--> End cookies\n               \n            });\n        </script>\n<!--// EU Cookie banner end -->\n</body>\n</html>\ndata = {'bins': []}\nform_area = <form autocomplete=\"off\" class=\"integration bin-lookup\" method=\"GET\" name=\"bin-collection-form\">\n<fieldset id=\"tab1\">\n...e=\"change-postcode\" type=\"submit\" value=\"Try another post code\">try another post code</button>.</p> </fieldset>\n</form>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Get postcode and UPRN from kwargs\n        user_postcode = kwargs.get(\"postcode\")\n        user_uprn = kwargs.get(\"uprn\")\n        check_postcode(user_postcode)\n        check_uprn(user_uprn)\n    \n        # Build URL to parse\n        council_url = f\"https://swale.gov.uk/bins-littering-and-the-environment/bins/collection-days?postcode={user_postcode.replace(' ', '+')}&addresses={user_uprn}&address-submit=\"\n    \n        # Parse URL and read if connection successful\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(council_url)\n        if response.status_code == 200:\n            soup = BeautifulSoup(response.text, features=\"html.parser\")\n            soup.prettify()\n        else:\n            raise ConnectionAbortedError(\"Could not parse council website.\")\n    \n        data = {\"bins\": []}\n    \n        # Get the collection bullet points on the page and parse them\n        form_area = soup.find(\"form\", {\"class\": \"integration bin-lookup\"})\n        collections = [\n            item.text.strip().split(\",\") for item in form_area.find_all(\"li\")\n        ]\n        for c in collections:\n            bin_type = c[0].strip()\n            # temp_date = c[2].strip() + \" \" + str(datetime.now().year)\n            bin_date = datetime.strptime(\n>               c[2].strip() + \" \" + str(datetime.now().year), \"%d %B %Y\"\n            ).strftime(date_format)\nE           IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/SwaleBoroughCouncil.py:48: IndexError","steps":[{"name":"Given the council: SwaleBoroughCouncil","time":{"start":1689703898721,"stop":1689703898722,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from SwaleBoroughCouncil","time":{"start":1689703898722,"stop":1689703901570,"duration":2848},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az810-341"},{"name":"thread","value":"2710-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SwaleBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":4},"items":[{"uid":"344c71927524bccf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/805//#testresult/344c71927524bccf","status":"passed","time":{"start":1689646018786,"stop":1689646041816,"duration":23030}},{"uid":"3734bdbf1853454f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/804//#testresult/3734bdbf1853454f","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1689559364125,"stop":1689559396219,"duration":32094}},{"uid":"ef5bf8ba78c1b374","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/803//#testresult/ef5bf8ba78c1b374","status":"passed","time":{"start":1689547531523,"stop":1689547534485,"duration":2962}}]},"tags":[]},"source":"364cce0388d10593.json","parameterValues":["SwaleBoroughCouncil"]}