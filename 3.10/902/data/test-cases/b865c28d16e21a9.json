{"uid":"b865c28d16e21a9","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1694394791086,"stop":1694394792673,"duration":1587},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\n_pytest_bdd_example = {'council': 'CharnwoodBoroughCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\n_pytest_bdd_example = {'council': 'CharnwoodBoroughCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1694394791086,"stop":1694394791086,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1694394791087,"stop":1694394792672,"duration":1585},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az171-495"},{"name":"thread","value":"2092-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":53,"unknown":0,"total":64},"items":[{"uid":"b9e7c7181514557f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/901//#testresult/b9e7c7181514557f","status":"passed","time":{"start":1694365121905,"stop":1694365123841,"duration":1936}},{"uid":"9e246e62f793b99e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/899//#testresult/9e246e62f793b99e","status":"passed","time":{"start":1694308575661,"stop":1694308577115,"duration":1454}},{"uid":"a5e642cd931383db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/891//#testresult/a5e642cd931383db","status":"passed","time":{"start":1694240262468,"stop":1694240263677,"duration":1209}},{"uid":"8b72d6b4405d2686","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/890//#testresult/8b72d6b4405d2686","status":"passed","time":{"start":1694221806407,"stop":1694221807756,"duration":1349}},{"uid":"4dc90a33caa974ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/889//#testresult/4dc90a33caa974ce","status":"passed","time":{"start":1694135569908,"stop":1694135571783,"duration":1875}},{"uid":"e335115ceead329f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/888//#testresult/e335115ceead329f","status":"passed","time":{"start":1694049147766,"stop":1694049149450,"duration":1684}},{"uid":"8f26846c14b24dab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/887//#testresult/8f26846c14b24dab","status":"passed","time":{"start":1693962731061,"stop":1693962732620,"duration":1559}},{"uid":"5fa3f7079e062221","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/885//#testresult/5fa3f7079e062221","status":"passed","time":{"start":1693876267045,"stop":1693876268972,"duration":1927}},{"uid":"c6fb9a952cfd7a65","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/884//#testresult/c6fb9a952cfd7a65","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1693789997113,"stop":1693789999070,"duration":1957}},{"uid":"eb6c7d385efbbdd7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/883//#testresult/eb6c7d385efbbdd7","status":"passed","time":{"start":1693703748542,"stop":1693703750290,"duration":1748}},{"uid":"3ad99775004c761d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/882//#testresult/3ad99775004c761d","status":"passed","time":{"start":1693616987106,"stop":1693616988774,"duration":1668}},{"uid":"a2cde827087174b1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/881//#testresult/a2cde827087174b1","status":"passed","time":{"start":1693530997369,"stop":1693530999353,"duration":1984}},{"uid":"c23bfe8ac647fff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/880//#testresult/c23bfe8ac647fff","status":"passed","time":{"start":1693444343461,"stop":1693444345318,"duration":1857}},{"uid":"4801b6c39cab2d3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/879//#testresult/4801b6c39cab2d3","status":"passed","time":{"start":1693357926334,"stop":1693357927954,"duration":1620}},{"uid":"187db0616371bb6a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/878//#testresult/187db0616371bb6a","status":"passed","time":{"start":1693271534936,"stop":1693271536503,"duration":1567}},{"uid":"42cf4ea52894541d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/877//#testresult/42cf4ea52894541d","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1693185162185,"stop":1693185164283,"duration":2098}},{"uid":"8bfdb1a4632d94c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/876//#testresult/8bfdb1a4632d94c4","status":"passed","time":{"start":1693098930722,"stop":1693098932094,"duration":1372}},{"uid":"a0d7439b29d07754","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/875//#testresult/a0d7439b29d07754","status":"passed","time":{"start":1693012147079,"stop":1693012148862,"duration":1783}},{"uid":"6babf24a294fba95","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/874//#testresult/6babf24a294fba95","status":"passed","time":{"start":1692925929662,"stop":1692925931760,"duration":2098}},{"uid":"f4f06f6e53127450","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/873//#testresult/f4f06f6e53127450","status":"passed","time":{"start":1692839420465,"stop":1692839421828,"duration":1363}}]},"tags":[]},"source":"b865c28d16e21a9.json","parameterValues":["CharnwoodBoroughCouncil"]}