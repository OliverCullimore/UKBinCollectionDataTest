{"uid":"6f30e6274b53c6f","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1692580232667,"stop":1692580233953,"duration":1286},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\n_pytest_bdd_example = {'council': 'CharnwoodBoroughCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\n_pytest_bdd_example = {'council': 'CharnwoodBoroughCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1692580232667,"stop":1692580232668,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1692580232668,"stop":1692580233953,"duration":1285},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az445-580"},{"name":"thread","value":"2249-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":33,"unknown":0,"total":40},"items":[{"uid":"3ac0b3517d4a5e35","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/866//#testresult/3ac0b3517d4a5e35","status":"passed","time":{"start":1692494002399,"stop":1692494003642,"duration":1243}},{"uid":"e36081539d469714","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/865//#testresult/e36081539d469714","status":"passed","time":{"start":1692407284657,"stop":1692407285823,"duration":1166}},{"uid":"e84c192bb39e43c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/864//#testresult/e84c192bb39e43c0","status":"passed","time":{"start":1692320999971,"stop":1692321001541,"duration":1570}},{"uid":"bd035aab6862b23","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/863//#testresult/bd035aab6862b23","status":"passed","time":{"start":1692294190466,"stop":1692294191993,"duration":1527}},{"uid":"18ebba8f1b1848c5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/861//#testresult/18ebba8f1b1848c5","status":"passed","time":{"start":1692234564828,"stop":1692234566460,"duration":1632}},{"uid":"a4ad2320e88e4f61","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/860//#testresult/a4ad2320e88e4f61","status":"passed","time":{"start":1692208409097,"stop":1692208410589,"duration":1492}},{"uid":"198aec9b47a7b035","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/859//#testresult/198aec9b47a7b035","status":"passed","time":{"start":1692148221852,"stop":1692148223570,"duration":1718}},{"uid":"f731f1189c1cf979","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/858//#testresult/f731f1189c1cf979","status":"passed","time":{"start":1692061849807,"stop":1692061851833,"duration":2026}},{"uid":"86fd15f10cdcdafc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/856//#testresult/86fd15f10cdcdafc","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1691975497346,"stop":1691975498909,"duration":1563}},{"uid":"999cbf48c44fd96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/855//#testresult/999cbf48c44fd96","status":"passed","time":{"start":1691889237057,"stop":1691889238371,"duration":1314}},{"uid":"30b8378cd69175f2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/854//#testresult/30b8378cd69175f2","status":"passed","time":{"start":1691802552932,"stop":1691802553938,"duration":1006}},{"uid":"c07df9b59690f80c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/853//#testresult/c07df9b59690f80c","status":"passed","time":{"start":1691716180329,"stop":1691716181696,"duration":1367}},{"uid":"b443d9944adef7db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/852//#testresult/b443d9944adef7db","status":"passed","time":{"start":1691630732537,"stop":1691630733826,"duration":1289}},{"uid":"4869e2093d36d885","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/851//#testresult/4869e2093d36d885","status":"passed","time":{"start":1691611916014,"stop":1691611917332,"duration":1318}},{"uid":"52bcf6a6509593b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/847//#testresult/52bcf6a6509593b3","status":"passed","time":{"start":1691544286476,"stop":1691544289461,"duration":2985}},{"uid":"f3ef78a3d8d77c70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/846//#testresult/f3ef78a3d8d77c70","status":"passed","time":{"start":1691457666093,"stop":1691457669673,"duration":3580}},{"uid":"8fd63053287a4c56","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/845//#testresult/8fd63053287a4c56","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1691371427565,"stop":1691371430633,"duration":3068}},{"uid":"341591cde323d628","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/844//#testresult/341591cde323d628","status":"passed","time":{"start":1691284703289,"stop":1691284706902,"duration":3613}},{"uid":"5c1c4314be9ab9fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/843//#testresult/5c1c4314be9ab9fa","status":"passed","time":{"start":1691198435184,"stop":1691198438136,"duration":2952}},{"uid":"ce7d4c0b41e7a843","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/842//#testresult/ce7d4c0b41e7a843","status":"passed","time":{"start":1691112236346,"stop":1691112239973,"duration":3627}}]},"tags":[]},"source":"6f30e6274b53c6f.json","parameterValues":["CharnwoodBoroughCouncil"]}