{"uid":"67463e71d1e4f4d1","name":"Validate Council Output [EastCambridgeshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"94109bff7ef580f8a70ff49447a40d87","time":{"start":1694240296259,"stop":1694240330561,"duration":34302},"status":"failed","statusMessage":"ValueError: not enough values to unpack (expected 3, got 1)","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[EastCambridgeshireCouncil]>>\n_pytest_bdd_example = {'council': 'EastCambridgeshireCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <EastCambridgeshireCouncil.CouncilClass object at 0x7fc230002260>\npage = <Response [200]>\nkwargs = {'paon': None, 'postcode': None, 'uprn': '10002597178', 'usrn': None}\nuprn = '10002597178'\nurl = 'https://eastcambs-self.achieveservice.com/appshost/firmstep/self/apps/custompage/bincollections?language=en&uprn=10002597178'\ns = <requests.sessions.Session object at 0x7fc230003fa0>\nsoup = <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n\n<html>\n<he...\n\r\n    $('#collectionaddress').attr('src', '/fillform/?iframe_id=collectionaddress');\r\n\r\n})();</script></body>\n</html>\n\ndata = {'bins': []}\nbins = <div class=\"row collectionsrow\"><div class=\"col-xs-12 title collectionscell\">\n          \t\t\t\t            Please select an address to view the upcoming collections.\n          \t\t\t\t          </div></div>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        # Check the UPRN is valid\n        check_uprn(uprn)\n    \n        # Request URL\n        url = f\"https://eastcambs-self.achieveservice.com/appshost/firmstep/self/apps/custompage/bincollections?language=en&uprn={uprn}\"\n    \n        # Make Request\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        page = s.get(url)\n    \n        # Make a BS4 object\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Form a JSON wrapper\n        data = {\"bins\": []}\n    \n        for bins in soup.find_all(\"div\", {\"class\": \"row collectionsrow\"}):\n            # Find the collection dates\n>           _, bin_type, date = bins.find_all(\"div\")\nE           ValueError: not enough values to unpack (expected 3, got 1)\n\nuk_bin_collection/uk_bin_collection/councils/EastCambridgeshireCouncil.py:37: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: not enough values to unpack (expected 3, got 1)","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[EastCambridgeshireCouncil]>>\n_pytest_bdd_example = {'council': 'EastCambridgeshireCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <EastCambridgeshireCouncil.CouncilClass object at 0x7fc230002260>\npage = <Response [200]>\nkwargs = {'paon': None, 'postcode': None, 'uprn': '10002597178', 'usrn': None}\nuprn = '10002597178'\nurl = 'https://eastcambs-self.achieveservice.com/appshost/firmstep/self/apps/custompage/bincollections?language=en&uprn=10002597178'\ns = <requests.sessions.Session object at 0x7fc230003fa0>\nsoup = <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n\n<html>\n<he...\n\r\n    $('#collectionaddress').attr('src', '/fillform/?iframe_id=collectionaddress');\r\n\r\n})();</script></body>\n</html>\n\ndata = {'bins': []}\nbins = <div class=\"row collectionsrow\"><div class=\"col-xs-12 title collectionscell\">\n          \t\t\t\t            Please select an address to view the upcoming collections.\n          \t\t\t\t          </div></div>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        # Check the UPRN is valid\n        check_uprn(uprn)\n    \n        # Request URL\n        url = f\"https://eastcambs-self.achieveservice.com/appshost/firmstep/self/apps/custompage/bincollections?language=en&uprn={uprn}\"\n    \n        # Make Request\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        page = s.get(url)\n    \n        # Make a BS4 object\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Form a JSON wrapper\n        data = {\"bins\": []}\n    \n        for bins in soup.find_all(\"div\", {\"class\": \"row collectionsrow\"}):\n            # Find the collection dates\n>           _, bin_type, date = bins.find_all(\"div\")\nE           ValueError: not enough values to unpack (expected 3, got 1)\n\nuk_bin_collection/uk_bin_collection/councils/EastCambridgeshireCouncil.py:37: ValueError","steps":[{"name":"Given the council: EastCambridgeshireCouncil","time":{"start":1694240296259,"stop":1694240296260,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from EastCambridgeshireCouncil","time":{"start":1694240296260,"stop":1694240330561,"duration":34301},"status":"failed","statusMessage":"not enough values to unpack (expected 3, got 1)","statusTrace":"ValueError: not enough values to unpack (expected 3, got 1)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az162-884"},{"name":"thread","value":"2097-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"EastCambridgeshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":57,"unknown":0,"total":61},"items":[{"uid":"66da199cfc3369e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/890//#testresult/66da199cfc3369e9","status":"failed","statusDetails":"ValueError: not enough values to unpack (expected 3, got 1)","time":{"start":1694221828278,"stop":1694221859345,"duration":31067}},{"uid":"b2c6f3717de6f1ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/889//#testresult/b2c6f3717de6f1ea","status":"passed","time":{"start":1694135594670,"stop":1694135596283,"duration":1613}},{"uid":"5302c0cd36a9c51b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/888//#testresult/5302c0cd36a9c51b","status":"passed","time":{"start":1694049170374,"stop":1694049171970,"duration":1596}},{"uid":"ee06067b173ef907","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/887//#testresult/ee06067b173ef907","status":"passed","time":{"start":1693962752780,"stop":1693962754448,"duration":1668}},{"uid":"16a4b3ba2b04168f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/885//#testresult/16a4b3ba2b04168f","status":"passed","time":{"start":1693876297580,"stop":1693876299307,"duration":1727}},{"uid":"e0571042b0df6f79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/884//#testresult/e0571042b0df6f79","status":"passed","time":{"start":1693790022465,"stop":1693790024348,"duration":1883}},{"uid":"cb2cda9718f12cbd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/883//#testresult/cb2cda9718f12cbd","status":"passed","time":{"start":1693703771580,"stop":1693703773236,"duration":1656}},{"uid":"85b57266df155ed3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/882//#testresult/85b57266df155ed3","status":"passed","time":{"start":1693617017296,"stop":1693617018786,"duration":1490}},{"uid":"334833046bb2bd59","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/881//#testresult/334833046bb2bd59","status":"passed","time":{"start":1693531020024,"stop":1693531021392,"duration":1368}},{"uid":"21e11f18704f2395","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/880//#testresult/21e11f18704f2395","status":"passed","time":{"start":1693444368124,"stop":1693444369777,"duration":1653}},{"uid":"9a5b1412ded7b5ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/879//#testresult/9a5b1412ded7b5ec","status":"passed","time":{"start":1693357964804,"stop":1693357966373,"duration":1569}},{"uid":"fd8d197c69b5532c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/878//#testresult/fd8d197c69b5532c","status":"passed","time":{"start":1693271557784,"stop":1693271559330,"duration":1546}},{"uid":"ca68fd75bc27cc53","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/877//#testresult/ca68fd75bc27cc53","status":"passed","time":{"start":1693185206102,"stop":1693185207834,"duration":1732}},{"uid":"3ecfabbb26499497","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/876//#testresult/3ecfabbb26499497","status":"passed","time":{"start":1693098959386,"stop":1693098960704,"duration":1318}},{"uid":"4a73ab28b79df276","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/875//#testresult/4a73ab28b79df276","status":"passed","time":{"start":1693012180422,"stop":1693012181927,"duration":1505}},{"uid":"6b7840d9ef070dd8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/874//#testresult/6b7840d9ef070dd8","status":"passed","time":{"start":1692925955313,"stop":1692925959878,"duration":4565}},{"uid":"7485f40f421fc47f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/873//#testresult/7485f40f421fc47f","status":"passed","time":{"start":1692839445585,"stop":1692839446998,"duration":1413}},{"uid":"5cdbe3845c3f49b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/871//#testresult/5cdbe3845c3f49b4","status":"passed","time":{"start":1692753067229,"stop":1692753068658,"duration":1429}},{"uid":"40b2d6827aca2ffc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/870//#testresult/40b2d6827aca2ffc","status":"passed","time":{"start":1692666708974,"stop":1692666710272,"duration":1298}},{"uid":"30eca7e2ebdbd80d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/869//#testresult/30eca7e2ebdbd80d","status":"passed","time":{"start":1692624217935,"stop":1692624219628,"duration":1693}}]},"tags":[]},"source":"67463e71d1e4f4d1.json","parameterValues":["EastCambridgeshireCouncil"]}