{"uid":"1cc10b87ee179b82","name":"Validate Council Output [StHelensBC]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"aefb4666f5cfa7265d9db53c16df38b6","time":{"start":1692321180375,"stop":1692321180975,"duration":600},"status":"failed","statusMessage":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\n_pytest_bdd_example = {'council': 'StHelensBC'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:43: in parse_data\n    collection_date = datetime.strptime(bin_date.get_text(strip=True), \"%a %d %b %Y\")\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Fri 8 Sept 2023', format = '%a %d %b %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\n_pytest_bdd_example = {'council': 'StHelensBC'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:43: in parse_data\n    collection_date = datetime.strptime(bin_date.get_text(strip=True), \"%a %d %b %Y\")\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Fri 8 Sept 2023', format = '%a %d %b %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: StHelensBC","time":{"start":1692321180375,"stop":1692321180376,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from StHelensBC","time":{"start":1692321180376,"stop":1692321180975,"duration":599},"status":"failed","statusMessage":"time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1032-974"},{"name":"thread","value":"2116-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"StHelensBC"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":26,"broken":0,"skipped":0,"passed":11,"unknown":0,"total":37},"items":[{"uid":"6bde3e3ba1a7f4f8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/863//#testresult/6bde3e3ba1a7f4f8","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1692294413497,"stop":1692294414238,"duration":741}},{"uid":"c777256568f3792d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/861//#testresult/c777256568f3792d","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1692234739538,"stop":1692234740991,"duration":1453}},{"uid":"7f331d248d9468ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/860//#testresult/7f331d248d9468ce","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1692208563125,"stop":1692208564077,"duration":952}},{"uid":"ce1d48afdfe1c6b5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/859//#testresult/ce1d48afdfe1c6b5","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1692148452920,"stop":1692148453704,"duration":784}},{"uid":"4b20c8fad0758ffc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/858//#testresult/4b20c8fad0758ffc","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1692061986944,"stop":1692061987920,"duration":976}},{"uid":"434e1f4f90d6660c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/856//#testresult/434e1f4f90d6660c","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691975742001,"stop":1691975742788,"duration":787}},{"uid":"9a97eb8498adc5bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/855//#testresult/9a97eb8498adc5bd","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691889477250,"stop":1691889478224,"duration":974}},{"uid":"d903802d042e1f99","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/854//#testresult/d903802d042e1f99","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691802678726,"stop":1691802682072,"duration":3346}},{"uid":"14c46aacbdc98248","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/853//#testresult/14c46aacbdc98248","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691716398227,"stop":1691716399744,"duration":1517}},{"uid":"ed0623adc5c8687e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/852//#testresult/ed0623adc5c8687e","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691630853423,"stop":1691630854047,"duration":624}},{"uid":"dba1511337ebfcc5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/851//#testresult/dba1511337ebfcc5","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691612018696,"stop":1691612019296,"duration":600}},{"uid":"227a1b0f435a2baf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/847//#testresult/227a1b0f435a2baf","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691544407522,"stop":1691544408154,"duration":632}},{"uid":"de96695db7b94bb1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/846//#testresult/de96695db7b94bb1","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691457799859,"stop":1691457800619,"duration":760}},{"uid":"e3cfa833197cab8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/845//#testresult/e3cfa833197cab8d","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691371783147,"stop":1691371783733,"duration":586}},{"uid":"2a680667c04aa7fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/844//#testresult/2a680667c04aa7fd","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691284874747,"stop":1691284875737,"duration":990}},{"uid":"92cbfb4777aa102d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/843//#testresult/92cbfb4777aa102d","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691198574131,"stop":1691198574725,"duration":594}},{"uid":"948d3369b0dfd68c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/842//#testresult/948d3369b0dfd68c","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691112378602,"stop":1691112379412,"duration":810}},{"uid":"d3dea3bc6b62bed3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/841//#testresult/d3dea3bc6b62bed3","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691026039685,"stop":1691026040628,"duration":943}},{"uid":"6399875a60f9d61a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/840//#testresult/6399875a60f9d61a","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690939395406,"stop":1690939396387,"duration":981}},{"uid":"efec49b6a41c31a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/839//#testresult/efec49b6a41c31a9","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690854126846,"stop":1690854129903,"duration":3057}}]},"tags":[]},"source":"1cc10b87ee179b82.json","parameterValues":["StHelensBC"]}