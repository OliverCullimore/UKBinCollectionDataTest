{"uid":"1391ab0022f0e3bc","name":"Validate Council Output [PrestonCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"adada69a336066ec844ff916b7714101","time":{"start":1690420950159,"stop":1690420955776,"duration":5617},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7fa44e9684c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[PrestonCityCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa440816260>, 'council': 'PrestonCityCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PrestonCityCouncil.CouncilClass object at 0x7fa4408025f0>\npage = 'https://selfservice.preston.gov.uk/service/Forms/FindMyNearest.aspx?Service=bins'\nkwargs = {'paon': 'Town Hall', 'postcode': 'PR1 2RL', 'uprn': None, 'usrn': None}\ndata = {'bins': []}, user_paon = 'Town Hall', user_postcode = 'PR1 2RL'\noptions = <selenium.webdriver.chrome.options.Options object at 0x7fa440802fe0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5123ecbd398a5a081026096e3fdece5a\")>\ninputElement_address = <selenium.webdriver.remote.webelement.WebElement (session=\"5123ecbd398a5a081026096e3fdece5a\", element=\"7F3BA4E0AAD1415C68B1A48428B14367_element_16\")>\ndropdown = <selenium.webdriver.remote.webelement.WebElement (session=\"5123ecbd398a5a081026096e3fdece5a\", element=\"D55C08C2678BFB80D53E246401EF69FB_element_23\")>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        page = \"https://selfservice.preston.gov.uk/service/Forms/FindMyNearest.aspx?Service=bins\"\n    \n        data = {\"bins\": []}\n    \n        user_paon = kwargs.get(\"paon\")\n        user_postcode = kwargs.get(\"postcode\")\n        check_paon(user_paon)\n        check_postcode(user_postcode)\n    \n        # Set up Selenium to run 'headless'\n        options = webdriver.ChromeOptions()\n        options.add_argument(\"--headless\")\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_experimental_option(\"excludeSwitches\", [\"enable-logging\"])\n    \n        # Create Selenium webdriver\n        driver = webdriver.Chrome(options=options)\n        driver.get(page)\n    \n        # If you bang in the house number (or property name) and postcode in the box it should find your property\n        inputElement_address = driver.find_element(\n            By.ID,\n            \"MainContent_txtAddress\",\n        )\n    \n        inputElement_address.send_keys(user_paon)\n        inputElement_address.send_keys(\" \")\n        inputElement_address.send_keys(user_postcode)\n    \n        driver.find_element(\n            By.ID,\n            \"btnSearch\",\n        ).click()\n    \n        # Wait for the 'Select your property' dropdown to appear and select the first result\n        dropdown = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.ID, \"MainContent_ddlSearchResults\"))\n        )\n        # Create a 'Select' for it, then select the first address in the list\n        # (Index 0 is \"Make a selection from the list\")\n        dropdownSelect = Select(dropdown)\n        dropdownSelect.select_by_index(1)\n    \n        # Wait for the 'View more' link to appear, then click it to get the full set of dates\n        viewMoreLink = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.LINK_TEXT, \"View more collection dates\"))\n        )\n        viewMoreLink.click()\n    \n        soup = BeautifulSoup(driver.page_source, features=\"html.parser\")\n    \n        topLevelSpan = soup.find(\n            \"span\",\n            id=\"lblCollectionDates\"\n        )\n    \n        collectionDivs = topLevelSpan.findChildren(recursive=False)\n        for collectionDiv in collectionDivs:\n            # Each date has two child divs - the date and the bin type\n            # However both strings are in <b> tags so there are 4 children, the text is at:\n            # Index 1 - date string i.e. 'Monday 01/01/2023'\n            # Index 3 - bin type i.e. 'General waste'\n            typeAndDateDivs = collectionDiv.findChildren()\n    \n            # Strip the day (i.e. Monday) out of the collection date string for parsing\n            dateString = typeAndDateDivs[1].text.split(' ')[1]\n    \n            data[\"bins\"].append(\n                {\n>                   \"type\": typeAndDateDivs[3].text,\n                    \"collectionDate\": datetime.strptime(dateString, \"%d/%m/%Y\").strftime(date_format)\n                }\n            )\nE           IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/PrestonCityCouncil.py:98: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7fa44e9684c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[PrestonCityCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa440816260>, 'council': 'PrestonCityCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PrestonCityCouncil.CouncilClass object at 0x7fa4408025f0>\npage = 'https://selfservice.preston.gov.uk/service/Forms/FindMyNearest.aspx?Service=bins'\nkwargs = {'paon': 'Town Hall', 'postcode': 'PR1 2RL', 'uprn': None, 'usrn': None}\ndata = {'bins': []}, user_paon = 'Town Hall', user_postcode = 'PR1 2RL'\noptions = <selenium.webdriver.chrome.options.Options object at 0x7fa440802fe0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5123ecbd398a5a081026096e3fdece5a\")>\ninputElement_address = <selenium.webdriver.remote.webelement.WebElement (session=\"5123ecbd398a5a081026096e3fdece5a\", element=\"7F3BA4E0AAD1415C68B1A48428B14367_element_16\")>\ndropdown = <selenium.webdriver.remote.webelement.WebElement (session=\"5123ecbd398a5a081026096e3fdece5a\", element=\"D55C08C2678BFB80D53E246401EF69FB_element_23\")>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        page = \"https://selfservice.preston.gov.uk/service/Forms/FindMyNearest.aspx?Service=bins\"\n    \n        data = {\"bins\": []}\n    \n        user_paon = kwargs.get(\"paon\")\n        user_postcode = kwargs.get(\"postcode\")\n        check_paon(user_paon)\n        check_postcode(user_postcode)\n    \n        # Set up Selenium to run 'headless'\n        options = webdriver.ChromeOptions()\n        options.add_argument(\"--headless\")\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_experimental_option(\"excludeSwitches\", [\"enable-logging\"])\n    \n        # Create Selenium webdriver\n        driver = webdriver.Chrome(options=options)\n        driver.get(page)\n    \n        # If you bang in the house number (or property name) and postcode in the box it should find your property\n        inputElement_address = driver.find_element(\n            By.ID,\n            \"MainContent_txtAddress\",\n        )\n    \n        inputElement_address.send_keys(user_paon)\n        inputElement_address.send_keys(\" \")\n        inputElement_address.send_keys(user_postcode)\n    \n        driver.find_element(\n            By.ID,\n            \"btnSearch\",\n        ).click()\n    \n        # Wait for the 'Select your property' dropdown to appear and select the first result\n        dropdown = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.ID, \"MainContent_ddlSearchResults\"))\n        )\n        # Create a 'Select' for it, then select the first address in the list\n        # (Index 0 is \"Make a selection from the list\")\n        dropdownSelect = Select(dropdown)\n        dropdownSelect.select_by_index(1)\n    \n        # Wait for the 'View more' link to appear, then click it to get the full set of dates\n        viewMoreLink = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.LINK_TEXT, \"View more collection dates\"))\n        )\n        viewMoreLink.click()\n    \n        soup = BeautifulSoup(driver.page_source, features=\"html.parser\")\n    \n        topLevelSpan = soup.find(\n            \"span\",\n            id=\"lblCollectionDates\"\n        )\n    \n        collectionDivs = topLevelSpan.findChildren(recursive=False)\n        for collectionDiv in collectionDivs:\n            # Each date has two child divs - the date and the bin type\n            # However both strings are in <b> tags so there are 4 children, the text is at:\n            # Index 1 - date string i.e. 'Monday 01/01/2023'\n            # Index 3 - bin type i.e. 'General waste'\n            typeAndDateDivs = collectionDiv.findChildren()\n    \n            # Strip the day (i.e. Monday) out of the collection date string for parsing\n            dateString = typeAndDateDivs[1].text.split(' ')[1]\n    \n            data[\"bins\"].append(\n                {\n>                   \"type\": typeAndDateDivs[3].text,\n                    \"collectionDate\": datetime.strptime(dateString, \"%d/%m/%Y\").strftime(date_format)\n                }\n            )\nE           IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/PrestonCityCouncil.py:98: IndexError","steps":[{"name":"Given the council: PrestonCityCouncil","time":{"start":1690420950159,"stop":1690420950160,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from PrestonCityCouncil","time":{"start":1690420950160,"stop":1690420955776,"duration":5616},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az614-643"},{"name":"thread","value":"2279-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"PrestonCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":10},"items":[{"uid":"d255b8cf64187869","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/830//#testresult/d255b8cf64187869","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1690335528267,"stop":1690335532582,"duration":4315}},{"uid":"d1a8b76a2b7d30ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/829//#testresult/d1a8b76a2b7d30ff","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1690249646000,"stop":1690249650725,"duration":4725}},{"uid":"2fbb7199ddd9ce67","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/828//#testresult/2fbb7199ddd9ce67","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1690162711057,"stop":1690162717715,"duration":6658}},{"uid":"671c637918af20f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/827//#testresult/671c637918af20f5","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1690123358572,"stop":1690123363384,"duration":4812}},{"uid":"1acacdca63ebfcc9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/824//#testresult/1acacdca63ebfcc9","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1690106936821,"stop":1690106941373,"duration":4552}},{"uid":"51345534c3301030","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/822//#testresult/51345534c3301030","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1690076606064,"stop":1690076611015,"duration":4951}},{"uid":"1013f388d4bd0759","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/821//#testresult/1013f388d4bd0759","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1690027433896,"stop":1690027440259,"duration":6363}},{"uid":"40561995bd130208","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/820//#testresult/40561995bd130208","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1690025834049,"stop":1690025841150,"duration":7101}},{"uid":"8e5dedf5888d84be","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/813//#testresult/8e5dedf5888d84be","status":"passed","time":{"start":1689840955196,"stop":1689840959985,"duration":4789}}]},"tags":[]},"source":"1391ab0022f0e3bc.json","parameterValues":["PrestonCityCouncil"]}