{"uid":"92cbfb4777aa102d","name":"Validate Council Output [StHelensBC]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"aefb4666f5cfa7265d9db53c16df38b6","time":{"start":1691198574131,"stop":1691198574725,"duration":594},"status":"failed","statusMessage":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\n_pytest_bdd_example = {'council': 'StHelensBC'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:43: in parse_data\n    collection_date = datetime.strptime(bin_date.get_text(strip=True), \"%a %d %b %Y\")\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Fri 8 Sept 2023', format = '%a %d %b %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\n_pytest_bdd_example = {'council': 'StHelensBC'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:43: in parse_data\n    collection_date = datetime.strptime(bin_date.get_text(strip=True), \"%a %d %b %Y\")\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Fri 8 Sept 2023', format = '%a %d %b %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: StHelensBC","time":{"start":1691198574131,"stop":1691198574132,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0},{"name":"When we scrape the data from StHelensBC","time":{"start":1691198574132,"stop":1691198574725,"duration":593},"status":"failed","statusMessage":"time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":2,"attachmentsCount":0},"afterStages":[],"labels":[{"name":"host","value":"fv-az1293-158"},{"name":"thread","value":"2128-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"StHelensBC"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":11,"unknown":0,"total":21},"items":[{"uid":"948d3369b0dfd68c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/842//#testresult/948d3369b0dfd68c","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691112378602,"stop":1691112379412,"duration":810}},{"uid":"d3dea3bc6b62bed3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/841//#testresult/d3dea3bc6b62bed3","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1691026039685,"stop":1691026040628,"duration":943}},{"uid":"6399875a60f9d61a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/840//#testresult/6399875a60f9d61a","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690939395406,"stop":1690939396387,"duration":981}},{"uid":"efec49b6a41c31a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/839//#testresult/efec49b6a41c31a9","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690854126846,"stop":1690854129903,"duration":3057}},{"uid":"d7be826df8f80b51","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/838//#testresult/d7be826df8f80b51","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690766932432,"stop":1690766935378,"duration":2946}},{"uid":"e48997029cbf17dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/837//#testresult/e48997029cbf17dd","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690680610613,"stop":1690680612815,"duration":2202}},{"uid":"ed331db9a6d6fcd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/836//#testresult/ed331db9a6d6fcd","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690593867283,"stop":1690593870384,"duration":3101}},{"uid":"8fee3236bcb2264e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/835//#testresult/8fee3236bcb2264e","status":"passed","time":{"start":1690563442856,"stop":1690563443813,"duration":957}},{"uid":"4af78ff099838a34","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/833//#testresult/4af78ff099838a34","status":"passed","time":{"start":1690562787042,"stop":1690562789920,"duration":2878}},{"uid":"4382f83d19308642","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/832//#testresult/4382f83d19308642","status":"passed","time":{"start":1690507438052,"stop":1690507438861,"duration":809}},{"uid":"4dd9133526b4abb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/831//#testresult/4dd9133526b4abb","status":"passed","time":{"start":1690420991657,"stop":1690420992438,"duration":781}},{"uid":"8dcb6bbc22fdbdaa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/830//#testresult/8dcb6bbc22fdbdaa","status":"passed","time":{"start":1690335561002,"stop":1690335561573,"duration":571}},{"uid":"4b84ffde31645d4d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/829//#testresult/4b84ffde31645d4d","status":"passed","time":{"start":1690249683185,"stop":1690249683778,"duration":593}},{"uid":"97259f9855510266","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/828//#testresult/97259f9855510266","status":"passed","time":{"start":1690162755527,"stop":1690162756465,"duration":938}},{"uid":"89781cbf14b449ca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/827//#testresult/89781cbf14b449ca","status":"passed","time":{"start":1690123394434,"stop":1690123395043,"duration":609}},{"uid":"338cafd213f2b017","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/824//#testresult/338cafd213f2b017","status":"passed","time":{"start":1690106973196,"stop":1690106973791,"duration":595}},{"uid":"ce0c004cc976a324","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/822//#testresult/ce0c004cc976a324","status":"failed","statusDetails":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","time":{"start":1690076644820,"stop":1690076645402,"duration":582}},{"uid":"edae3a2d7e54948","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/821//#testresult/edae3a2d7e54948","status":"failed","statusDetails":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","time":{"start":1690027478288,"stop":1690027479137,"duration":849}},{"uid":"7250385a1a4f6686","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/820//#testresult/7250385a1a4f6686","status":"passed","time":{"start":1690025879405,"stop":1690025880373,"duration":968}},{"uid":"bbdccdb474615324","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.10/813//#testresult/bbdccdb474615324","status":"passed","time":{"start":1689840991899,"stop":1689840992514,"duration":615}}]},"tags":[]},"source":"92cbfb4777aa102d.json","parameterValues":["StHelensBC"]}