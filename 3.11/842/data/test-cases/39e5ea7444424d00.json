{"uid":"39e5ea7444424d00","name":"Validate Council Output [BromleyBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7f3dc7acf0fc90eded39e25c4ed3bb60","time":{"start":1691112233702,"stop":1691112242193,"duration":8491},"status":"failed","statusMessage":"dateutil.parser._parser.ParserError: Unknown string format: Friday, 4th August\n              \n              (In progress)","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil]>>\n_pytest_bdd_example = {'council': 'BromleyBoroughCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BromleyBoroughCouncil.py:38: in parse_data\n    date = dateutil.parser.parse(collectionDate[1].text.strip())\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/dateutil/parser/_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <dateutil.parser._parser.parser object at 0x7f81aee02810>\ntimestr = 'Friday, 4th August\\n              \\n              (In progress)'\ndefault = datetime.datetime(2023, 8, 4, 0, 0), ignoretz = False, tzinfos = None\nkwargs = {}, res = None, skipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \"\"\"\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n                >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n                >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        \"\"\"\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n>           raise ParserError(\"Unknown string format: %s\", timestr)\nE           dateutil.parser._parser.ParserError: Unknown string format: Friday, 4th August\nE                         \nE                         (In progress)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/dateutil/parser/_parser.py:643: ParserError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"dateutil.parser._parser.ParserError: Unknown string format: Friday, 4th August\n              \n              (In progress)","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil]>>\n_pytest_bdd_example = {'council': 'BromleyBoroughCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BromleyBoroughCouncil.py:38: in parse_data\n    date = dateutil.parser.parse(collectionDate[1].text.strip())\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/dateutil/parser/_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <dateutil.parser._parser.parser object at 0x7f81aee02810>\ntimestr = 'Friday, 4th August\\n              \\n              (In progress)'\ndefault = datetime.datetime(2023, 8, 4, 0, 0), ignoretz = False, tzinfos = None\nkwargs = {}, res = None, skipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \"\"\"\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n                >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n                >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        \"\"\"\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n>           raise ParserError(\"Unknown string format: %s\", timestr)\nE           dateutil.parser._parser.ParserError: Unknown string format: Friday, 4th August\nE                         \nE                         (In progress)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/dateutil/parser/_parser.py:643: ParserError","steps":[{"name":"Given the council: BromleyBoroughCouncil","time":{"start":1691112233702,"stop":1691112233703,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0},{"name":"When we scrape the data from BromleyBoroughCouncil","time":{"start":1691112233703,"stop":1691112242193,"duration":8490},"status":"failed","statusMessage":"Unknown string format: Friday, 4th August\n              \n              (In progress)","statusTrace":"dateutil.parser._parser.ParserError: Unknown string format: Friday, 4th August\n              \n              (In progress)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":2,"attachmentsCount":0},"afterStages":[],"labels":[{"name":"host","value":"fv-az590-380"},{"name":"thread","value":"2083-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BromleyBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":16,"unknown":0,"total":24},"items":[{"uid":"768e5f25f273aa10","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/841//#testresult/768e5f25f273aa10","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1691025901464,"stop":1691025902409,"duration":945}},{"uid":"66181a0fb8f96d98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/840//#testresult/66181a0fb8f96d98","status":"passed","time":{"start":1690939247724,"stop":1690939255538,"duration":7814}},{"uid":"345b2d22208d3159","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/839//#testresult/345b2d22208d3159","status":"passed","time":{"start":1690854004813,"stop":1690854013264,"duration":8451}},{"uid":"b72ae461e848b012","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/838//#testresult/b72ae461e848b012","status":"passed","time":{"start":1690766734432,"stop":1690766741123,"duration":6691}},{"uid":"7b3d19a9d76a6579","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/837//#testresult/7b3d19a9d76a6579","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1690680386102,"stop":1690680387112,"duration":1010}},{"uid":"a1fc2f4371db6c60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/836//#testresult/a1fc2f4371db6c60","status":"passed","time":{"start":1690593740240,"stop":1690593746775,"duration":6535}},{"uid":"b79e4dfed95ba7fd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/835//#testresult/b79e4dfed95ba7fd","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'find_all'","time":{"start":1690563302483,"stop":1690563304083,"duration":1600}},{"uid":"6d439c10a56b928e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/833//#testresult/6d439c10a56b928e","status":"passed","time":{"start":1690562670754,"stop":1690562678975,"duration":8221}},{"uid":"6b5d00b316db6998","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/832//#testresult/6b5d00b316db6998","status":"failed","statusDetails":"dateutil.parser._parser.ParserError: Unknown string format: Friday, 28th July\n              \n              (In progress)","time":{"start":1690507302015,"stop":1690507309740,"duration":7725}},{"uid":"87507f45624fa4d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/831//#testresult/87507f45624fa4d6","status":"passed","time":{"start":1690420849567,"stop":1690420856091,"duration":6524}},{"uid":"f4cf7fa667df3249","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/830//#testresult/f4cf7fa667df3249","status":"passed","time":{"start":1690335454210,"stop":1690335463523,"duration":9313}},{"uid":"95aa803de2442f9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/829//#testresult/95aa803de2442f9f","status":"passed","time":{"start":1690249577168,"stop":1690249585623,"duration":8455}},{"uid":"f36e8260473d280b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/828//#testresult/f36e8260473d280b","status":"passed","time":{"start":1690162603963,"stop":1690162611251,"duration":7288}},{"uid":"d747f91efd5c000","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/827//#testresult/d747f91efd5c000","status":"passed","time":{"start":1690123296411,"stop":1690123303054,"duration":6643}},{"uid":"1709477ebf060c91","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/824//#testresult/1709477ebf060c91","status":"passed","time":{"start":1690106873935,"stop":1690106881407,"duration":7472}},{"uid":"b2894d0664a05ab0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/822//#testresult/b2894d0664a05ab0","status":"failed","statusDetails":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","time":{"start":1690076517497,"stop":1690076525835,"duration":8338}},{"uid":"20c25558705e346d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/821//#testresult/20c25558705e346d","status":"failed","statusDetails":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","time":{"start":1690027348934,"stop":1690027356773,"duration":7839}},{"uid":"46b86afc7b59d5de","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/820//#testresult/46b86afc7b59d5de","status":"passed","time":{"start":1690025774366,"stop":1690025781111,"duration":6745}},{"uid":"9116f972fc21df05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/817//#testresult/9116f972fc21df05","status":"passed","time":{"start":1689989686385,"stop":1689989693140,"duration":6755}},{"uid":"b10b71fb9c9aa54f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/816//#testresult/b10b71fb9c9aa54f","status":"passed","time":{"start":1689957102251,"stop":1689957108711,"duration":6460}}]},"tags":[]},"source":"39e5ea7444424d00.json","parameterValues":["BromleyBoroughCouncil"]}