{"uid":"db016a4fd3747e8c","name":"Validate Council Output [SouthOxfordshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"dd90c8e7bdfef60ba64401e6c2135205","time":{"start":1693185392666,"stop":1693185396922,"duration":4256},"status":"failed","statusMessage":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","statusTrace":"self = <SouthOxfordshireCouncil.CouncilClass object at 0x7f8690392d90>\npage = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '10033002851', 'usrn': None}\nuser_uprn = '10033002851', cookies = {'SVBINZONE': 'SOUTH%3AUPRN%4010033002851'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'SOVA_TAG': 'SOUTH', 'ebd': '0'}, response = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \n Powered by Verj.io\n www.verj.io\n -->\n<head>\n<meta content=\"text/html; charset...e?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=2&amp;cb=980943585\" type=\"text/javascript\"></script></body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            # 'JSESSIONID': '96F2A15C14569B2ED2BBEB140FE86532',\n            \"SVBINZONE\": f\"SOUTH%3AUPRN%40{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb?SOVA_TAG=SOUTH&ebd=0&ebz=1_1668467255368\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"SOVA_TAG\": \"SOUTH\",\n            \"ebd\": \"0\",\n            # 'ebz':      '1_1668467255368',\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # Page has slider info side by side, which are two instances of this class\n        for bin in soup.find_all(\"div\", {\"class\": \"binextra\"}):\n            bin_info = bin.text.split(\"-\")\n            try:\n                # No date validation since year isn't included on webpage\n                bin_date = get_next_occurrence_from_day_month(\n>                   datetime.strptime(bin_info[0].strip() + \" \" + datetime.today().strftime(\"%Y\"),\n                                      \"%A %d %B %Y\")).strftime(date_format)\n\nuk_bin_collection/uk_bin_collection/councils/SouthOxfordshireCouncil.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Your usual collection day is different this weekSaturday 2 September 2023'\nformat = '%A %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:349: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthOxfordshireCouncil]>>\n_pytest_bdd_example = {'council': 'SouthOxfordshireCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthOxfordshireCouncil.CouncilClass object at 0x7f8690392d90>\npage = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '10033002851', 'usrn': None}\nuser_uprn = '10033002851', cookies = {'SVBINZONE': 'SOUTH%3AUPRN%4010033002851'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'SOVA_TAG': 'SOUTH', 'ebd': '0'}, response = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \n Powered by Verj.io\n www.verj.io\n -->\n<head>\n<meta content=\"text/html; charset...e?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=2&amp;cb=980943585\" type=\"text/javascript\"></script></body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            # 'JSESSIONID': '96F2A15C14569B2ED2BBEB140FE86532',\n            \"SVBINZONE\": f\"SOUTH%3AUPRN%40{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb?SOVA_TAG=SOUTH&ebd=0&ebz=1_1668467255368\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"SOVA_TAG\": \"SOUTH\",\n            \"ebd\": \"0\",\n            # 'ebz':      '1_1668467255368',\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # Page has slider info side by side, which are two instances of this class\n        for bin in soup.find_all(\"div\", {\"class\": \"binextra\"}):\n            bin_info = bin.text.split(\"-\")\n            try:\n                # No date validation since year isn't included on webpage\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(bin_info[0].strip() + \" \" + datetime.today().strftime(\"%Y\"),\n                                      \"%A %d %B %Y\")).strftime(date_format)\n                bin_type = str.capitalize(bin_info[1].strip())\n            except Exception as ex:\n>               raise ValueError(f\"Error parsing bin data: {ex}\")\nE               ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'\n\nuk_bin_collection/uk_bin_collection/councils/SouthOxfordshireCouncil.py:68: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","statusTrace":"self = <SouthOxfordshireCouncil.CouncilClass object at 0x7f8690392d90>\npage = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '10033002851', 'usrn': None}\nuser_uprn = '10033002851', cookies = {'SVBINZONE': 'SOUTH%3AUPRN%4010033002851'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'SOVA_TAG': 'SOUTH', 'ebd': '0'}, response = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \n Powered by Verj.io\n www.verj.io\n -->\n<head>\n<meta content=\"text/html; charset...e?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=2&amp;cb=980943585\" type=\"text/javascript\"></script></body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            # 'JSESSIONID': '96F2A15C14569B2ED2BBEB140FE86532',\n            \"SVBINZONE\": f\"SOUTH%3AUPRN%40{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb?SOVA_TAG=SOUTH&ebd=0&ebz=1_1668467255368\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"SOVA_TAG\": \"SOUTH\",\n            \"ebd\": \"0\",\n            # 'ebz':      '1_1668467255368',\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # Page has slider info side by side, which are two instances of this class\n        for bin in soup.find_all(\"div\", {\"class\": \"binextra\"}):\n            bin_info = bin.text.split(\"-\")\n            try:\n                # No date validation since year isn't included on webpage\n                bin_date = get_next_occurrence_from_day_month(\n>                   datetime.strptime(bin_info[0].strip() + \" \" + datetime.today().strftime(\"%Y\"),\n                                      \"%A %d %B %Y\")).strftime(date_format)\n\nuk_bin_collection/uk_bin_collection/councils/SouthOxfordshireCouncil.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Your usual collection day is different this weekSaturday 2 September 2023'\nformat = '%A %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:349: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthOxfordshireCouncil]>>\n_pytest_bdd_example = {'council': 'SouthOxfordshireCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SouthOxfordshireCouncil.CouncilClass object at 0x7f8690392d90>\npage = ''\nkwargs = {'paon': None, 'postcode': None, 'uprn': '10033002851', 'usrn': None}\nuser_uprn = '10033002851', cookies = {'SVBINZONE': 'SOUTH%3AUPRN%4010033002851'}\nheaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'en-GB,en;q=0.7', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', ...}\nparams = {'SOVA_TAG': 'SOUTH', 'ebd': '0'}, response = <Response [200]>\nsoup = <!DOCTYPE html>\n\n<html lang=\"EN\">\n<!-- \n Powered by Verj.io\n www.verj.io\n -->\n<head>\n<meta content=\"text/html; charset...e?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=2&amp;cb=980943585\" type=\"text/javascript\"></script></body>\n</html>\n\ndata = {'bins': []}\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # UPRN is passed in via a cookie. Set cookies/params and GET the page\n        cookies = {\n            # 'JSESSIONID': '96F2A15C14569B2ED2BBEB140FE86532',\n            \"SVBINZONE\": f\"SOUTH%3AUPRN%40{user_uprn}\",\n        }\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n            \"Accept-Language\": \"en-GB,en;q=0.7\",\n            \"Cache-Control\": \"max-age=0\",\n            \"Connection\": \"keep-alive\",\n            \"Referer\": \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb?SOVA_TAG=SOUTH&ebd=0&ebz=1_1668467255368\",\n            \"Sec-Fetch-Dest\": \"document\",\n            \"Sec-Fetch-Mode\": \"navigate\",\n            \"Sec-Fetch-Site\": \"same-origin\",\n            \"Sec-Fetch-User\": \"?1\",\n            \"Sec-GPC\": \"1\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\",\n        }\n        params = {\n            \"SOVA_TAG\": \"SOUTH\",\n            \"ebd\": \"0\",\n            # 'ebz':      '1_1668467255368',\n        }\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            \"https://eform.southoxon.gov.uk/ebase/BINZONE_DESKTOP.eb\",\n            params=params,\n            headers=headers,\n            cookies=cookies,\n        )\n    \n        # Parse response text for super speedy finding\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n    \n        # Page has slider info side by side, which are two instances of this class\n        for bin in soup.find_all(\"div\", {\"class\": \"binextra\"}):\n            bin_info = bin.text.split(\"-\")\n            try:\n                # No date validation since year isn't included on webpage\n                bin_date = get_next_occurrence_from_day_month(\n                    datetime.strptime(bin_info[0].strip() + \" \" + datetime.today().strftime(\"%Y\"),\n                                      \"%A %d %B %Y\")).strftime(date_format)\n                bin_type = str.capitalize(bin_info[1].strip())\n            except Exception as ex:\n>               raise ValueError(f\"Error parsing bin data: {ex}\")\nE               ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'\n\nuk_bin_collection/uk_bin_collection/councils/SouthOxfordshireCouncil.py:68: ValueError","steps":[{"name":"Given the council: SouthOxfordshireCouncil","time":{"start":1693185392666,"stop":1693185392666,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from SouthOxfordshireCouncil","time":{"start":1693185392666,"stop":1693185396922,"duration":4256},"status":"failed","statusMessage":"Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","statusTrace":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az174-966"},{"name":"thread","value":"2172-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthOxfordshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":52},"items":[{"uid":"92f812222d8daa60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/876//#testresult/92f812222d8daa60","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","time":{"start":1693099170278,"stop":1693099174153,"duration":3875}},{"uid":"715e50f3834a573c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/875//#testresult/715e50f3834a573c","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","time":{"start":1693012451318,"stop":1693012454926,"duration":3608}},{"uid":"9973270b287853e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/874//#testresult/9973270b287853e2","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","time":{"start":1692926199130,"stop":1692926203072,"duration":3942}},{"uid":"9a35bf07eb4e8f98","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/873//#testresult/9a35bf07eb4e8f98","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","time":{"start":1692839734410,"stop":1692839739039,"duration":4629}},{"uid":"4016a34e7319daea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/871//#testresult/4016a34e7319daea","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","time":{"start":1692753299591,"stop":1692753303711,"duration":4120}},{"uid":"b4f21c9a69299dad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/870//#testresult/b4f21c9a69299dad","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","time":{"start":1692666846889,"stop":1692666850997,"duration":4108}},{"uid":"3daf139ccbedf14c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/869//#testresult/3daf139ccbedf14c","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","time":{"start":1692624322666,"stop":1692624326455,"duration":3789}},{"uid":"b739fe174fd6f924","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/867//#testresult/b739fe174fd6f924","status":"failed","statusDetails":"ValueError: Error parsing bin data: time data 'Your usual collection day is different this weekSaturday 2 September 2023' does not match format '%A %d %B %Y'","time":{"start":1692580368053,"stop":1692580371896,"duration":3843}},{"uid":"44e21d7f85c269f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/866//#testresult/44e21d7f85c269f0","status":"passed","time":{"start":1692494188985,"stop":1692494192919,"duration":3934}},{"uid":"808efe8e05bca496","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/865//#testresult/808efe8e05bca496","status":"passed","time":{"start":1692407512615,"stop":1692407515955,"duration":3340}},{"uid":"b28456ed211b4683","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/864//#testresult/b28456ed211b4683","status":"passed","time":{"start":1692321177750,"stop":1692321182348,"duration":4598}},{"uid":"26e98e5786732ad1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/863//#testresult/26e98e5786732ad1","status":"passed","time":{"start":1692294317858,"stop":1692294421392,"duration":103534}},{"uid":"73e66dc4003cac0d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/861//#testresult/73e66dc4003cac0d","status":"passed","time":{"start":1692234731659,"stop":1692234735474,"duration":3815}},{"uid":"515eabca70a5c6c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/860//#testresult/515eabca70a5c6c7","status":"passed","time":{"start":1692208517701,"stop":1692208520866,"duration":3165}},{"uid":"12a5189581f75e6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/859//#testresult/12a5189581f75e6b","status":"passed","time":{"start":1692148343927,"stop":1692148448467,"duration":104540}},{"uid":"702167f2c3e198f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/858//#testresult/702167f2c3e198f0","status":"passed","time":{"start":1692061959923,"stop":1692061963101,"duration":3178}},{"uid":"588d5b8d2cd7bcdf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/856//#testresult/588d5b8d2cd7bcdf","status":"passed","time":{"start":1691975611537,"stop":1691975732471,"duration":120934}},{"uid":"2276f1f77be28e68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/855//#testresult/2276f1f77be28e68","status":"passed","time":{"start":1691889347651,"stop":1691889468382,"duration":120731}},{"uid":"c741de6a1e3d77fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/854//#testresult/c741de6a1e3d77fb","status":"passed","time":{"start":1691802693624,"stop":1691802697698,"duration":4074}},{"uid":"5c568901473b93a9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/853//#testresult/5c568901473b93a9","status":"passed","time":{"start":1691716291532,"stop":1691716394853,"duration":103321}}]},"tags":[]},"source":"db016a4fd3747e8c.json","parameterValues":["SouthOxfordshireCouncil"]}