{"uid":"1e55dc6d8b6f6799","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1692624192690,"stop":1692624193811,"duration":1121},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\n_pytest_bdd_example = {'council': 'CharnwoodBoroughCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\n_pytest_bdd_example = {'council': 'CharnwoodBoroughCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1692624192691,"stop":1692624192691,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1692624192691,"stop":1692624193811,"duration":1120},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az419-558"},{"name":"thread","value":"2116-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":37,"unknown":0,"total":45},"items":[{"uid":"62ae86ef686bbcf8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/867//#testresult/62ae86ef686bbcf8","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1692580226339,"stop":1692580227674,"duration":1335}},{"uid":"7efc41e1b5821a9f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/866//#testresult/7efc41e1b5821a9f","status":"passed","time":{"start":1692494020303,"stop":1692494021964,"duration":1661}},{"uid":"3f46cadf245b9448","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/865//#testresult/3f46cadf245b9448","status":"passed","time":{"start":1692407282444,"stop":1692407283425,"duration":981}},{"uid":"3ff5023a99d9ea5e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/864//#testresult/3ff5023a99d9ea5e","status":"passed","time":{"start":1692321010122,"stop":1692321012147,"duration":2025}},{"uid":"37df3e400ae69a2d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/863//#testresult/37df3e400ae69a2d","status":"passed","time":{"start":1692294192321,"stop":1692294193693,"duration":1372}},{"uid":"b0377e7fc6133935","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/861//#testresult/b0377e7fc6133935","status":"passed","time":{"start":1692234559689,"stop":1692234560974,"duration":1285}},{"uid":"53b192e220378dba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/860//#testresult/53b192e220378dba","status":"passed","time":{"start":1692208391311,"stop":1692208392878,"duration":1567}},{"uid":"e0c98464fdb1bbb7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/859//#testresult/e0c98464fdb1bbb7","status":"passed","time":{"start":1692148214926,"stop":1692148216626,"duration":1700}},{"uid":"625cb25869b888c1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/858//#testresult/625cb25869b888c1","status":"passed","time":{"start":1692061837091,"stop":1692061838497,"duration":1406}},{"uid":"99ab7962eacd2889","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/856//#testresult/99ab7962eacd2889","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1691975487856,"stop":1691975489584,"duration":1728}},{"uid":"456b2b0848d30c2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/855//#testresult/456b2b0848d30c2","status":"passed","time":{"start":1691889228533,"stop":1691889230002,"duration":1469}},{"uid":"12b2678e7ede6e40","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/854//#testresult/12b2678e7ede6e40","status":"passed","time":{"start":1691802551185,"stop":1691802552998,"duration":1813}},{"uid":"3e6c48bd99035c79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/853//#testresult/3e6c48bd99035c79","status":"passed","time":{"start":1691716177140,"stop":1691716178545,"duration":1405}},{"uid":"1a86005b1f467481","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/852//#testresult/1a86005b1f467481","status":"passed","time":{"start":1691630744317,"stop":1691630745874,"duration":1557}},{"uid":"7e8f2b2105d33756","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/851//#testresult/7e8f2b2105d33756","status":"passed","time":{"start":1691611924117,"stop":1691611926232,"duration":2115}},{"uid":"cf3717269b76d90","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/847//#testresult/cf3717269b76d90","status":"passed","time":{"start":1691544296642,"stop":1691544300180,"duration":3538}},{"uid":"529c015c3c5a8981","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/846//#testresult/529c015c3c5a8981","status":"passed","time":{"start":1691457657419,"stop":1691457660295,"duration":2876}},{"uid":"1f76d0fb3802c31c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/845//#testresult/1f76d0fb3802c31c","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1691371432563,"stop":1691371436315,"duration":3752}},{"uid":"9e7e96865a48dba1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/844//#testresult/9e7e96865a48dba1","status":"passed","time":{"start":1691284713232,"stop":1691284717827,"duration":4595}},{"uid":"faf5da7d0b33ed60","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/843//#testresult/faf5da7d0b33ed60","status":"passed","time":{"start":1691198433632,"stop":1691198436595,"duration":2963}}]},"tags":[]},"source":"1e55dc6d8b6f6799.json","parameterValues":["CharnwoodBoroughCouncil"]}