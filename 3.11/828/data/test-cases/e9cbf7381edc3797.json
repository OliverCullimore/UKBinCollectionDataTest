{"uid":"e9cbf7381edc3797","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1690162587405,"stop":1690162590520,"duration":3115},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0691eaa3e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0691f00210>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"fixturefunc = <function scrape_step at 0x7f0691eaa3e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0691f00210>, 'council': 'CharnwoodBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1690162587405,"stop":1690162587406,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1690162587406,"stop":1690162590520,"duration":3114},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az566-633"},{"name":"thread","value":"2245-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":11},"items":[{"uid":"e76392272d240678","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/827//#testresult/e76392272d240678","status":"passed","time":{"start":1690123285035,"stop":1690123288284,"duration":3249}},{"uid":"b42cc3e851529ec0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/824//#testresult/b42cc3e851529ec0","status":"passed","time":{"start":1690106863058,"stop":1690106866841,"duration":3783}},{"uid":"523fe98c86083ee8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/822//#testresult/523fe98c86083ee8","status":"failed","statusDetails":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","time":{"start":1690076505266,"stop":1690076508432,"duration":3166}},{"uid":"b27f624a1804a53b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/821//#testresult/b27f624a1804a53b","status":"failed","statusDetails":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","time":{"start":1690027209046,"stop":1690027211797,"duration":2751}},{"uid":"3471d71820d1416d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/820//#testresult/3471d71820d1416d","status":"passed","time":{"start":1690025634823,"stop":1690025636501,"duration":1678}},{"uid":"3a7bf1d4431252ea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/817//#testresult/3a7bf1d4431252ea","status":"passed","time":{"start":1689989675227,"stop":1689989676931,"duration":1704}},{"uid":"6d3dabbc4ca64018","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/816//#testresult/6d3dabbc4ca64018","status":"passed","time":{"start":1689957089615,"stop":1689957091087,"duration":1472}},{"uid":"1bb39903f50ce5ab","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/815//#testresult/1bb39903f50ce5ab","status":"passed","time":{"start":1689956975136,"stop":1689956976429,"duration":1293}},{"uid":"189c6f93a7e3bf0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/814//#testresult/189c6f93a7e3bf0f","status":"passed","time":{"start":1689903412826,"stop":1689903414763,"duration":1937}},{"uid":"670c8c17dec060f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/813//#testresult/670c8c17dec060f5","status":"passed","time":{"start":1689840841297,"stop":1689840842682,"duration":1385}}]},"tags":[]},"source":"e9cbf7381edc3797.json","parameterValues":["CharnwoodBoroughCouncil"]}