{"uid":"82a202177bc159f2","name":"Validate Council Output [StHelensBC]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"aefb4666f5cfa7265d9db53c16df38b6","time":{"start":1691026007168,"stop":1691026010139,"duration":2971},"status":"failed","statusMessage":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\n_pytest_bdd_example = {'council': 'StHelensBC'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:43: in parse_data\n    collection_date = datetime.strptime(bin_date.get_text(strip=True), \"%a %d %b %Y\")\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Fri 8 Sept 2023', format = '%a %d %b %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\n_pytest_bdd_example = {'council': 'StHelensBC'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:70: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:43: in parse_data\n    collection_date = datetime.strptime(bin_date.get_text(strip=True), \"%a %d %b %Y\")\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Fri 8 Sept 2023', format = '%a %d %b %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: StHelensBC","time":{"start":1691026007169,"stop":1691026007169,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from StHelensBC","time":{"start":1691026007169,"stop":1691026010139,"duration":2970},"status":"failed","statusMessage":"time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","statusTrace":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az313-823"},{"name":"thread","value":"2244-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"StHelensBC"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":15,"unknown":0,"total":23},"items":[{"uid":"a657930a5769d702","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/840//#testresult/a657930a5769d702","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690939368564,"stop":1690939371502,"duration":2938}},{"uid":"dad4cd70f351433c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/839//#testresult/dad4cd70f351433c","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690854126651,"stop":1690854129665,"duration":3014}},{"uid":"e06f337b16072231","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/838//#testresult/e06f337b16072231","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690766968287,"stop":1690766969070,"duration":783}},{"uid":"df08d80d102a45e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/837//#testresult/df08d80d102a45e2","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690680609262,"stop":1690680612573,"duration":3311}},{"uid":"d9e66e62754d3fb1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/836//#testresult/d9e66e62754d3fb1","status":"failed","statusDetails":"ValueError: time data 'Fri 8 Sept 2023' does not match format '%a %d %b %Y'","time":{"start":1690593925829,"stop":1690593926631,"duration":802}},{"uid":"d0d4fec83492dbae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/835//#testresult/d0d4fec83492dbae","status":"passed","time":{"start":1690563409080,"stop":1690563409685,"duration":605}},{"uid":"1a1f114c3e8748e0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/833//#testresult/1a1f114c3e8748e0","status":"passed","time":{"start":1690562807901,"stop":1690562808879,"duration":978}},{"uid":"ec9b4e6a227e72db","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/832//#testresult/ec9b4e6a227e72db","status":"passed","time":{"start":1690507429839,"stop":1690507433108,"duration":3269}},{"uid":"452b937b2217cf9c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/831//#testresult/452b937b2217cf9c","status":"passed","time":{"start":1690420974941,"stop":1690420975537,"duration":596}},{"uid":"ceb107f86049383e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/830//#testresult/ceb107f86049383e","status":"passed","time":{"start":1690335559032,"stop":1690335559600,"duration":568}},{"uid":"3bb5ed5556d65fd9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/829//#testresult/3bb5ed5556d65fd9","status":"passed","time":{"start":1690249687474,"stop":1690249688063,"duration":589}},{"uid":"5aa92b23734dc5e0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/828//#testresult/5aa92b23734dc5e0","status":"passed","time":{"start":1690162715908,"stop":1690162716467,"duration":559}},{"uid":"5fafaec4c3f90fb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/827//#testresult/5fafaec4c3f90fb3","status":"passed","time":{"start":1690123422156,"stop":1690123423151,"duration":995}},{"uid":"1e103f7edaa0ae03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/824//#testresult/1e103f7edaa0ae03","status":"passed","time":{"start":1690106984611,"stop":1690106985456,"duration":845}},{"uid":"fba45d57cf8aa7a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/822//#testresult/fba45d57cf8aa7a0","status":"failed","statusDetails":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","time":{"start":1690076642796,"stop":1690076643410,"duration":614}},{"uid":"ac2585691fd60fae","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/821//#testresult/ac2585691fd60fae","status":"failed","statusDetails":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","time":{"start":1690027432125,"stop":1690027432692,"duration":567}},{"uid":"5f27161b7b8c570c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/820//#testresult/5f27161b7b8c570c","status":"passed","time":{"start":1690025883011,"stop":1690025883809,"duration":798}},{"uid":"8534432494f6f3ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/817//#testresult/8534432494f6f3ff","status":"passed","time":{"start":1689989816852,"stop":1689989817827,"duration":975}},{"uid":"c2a46a9ea157eff9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/816//#testresult/c2a46a9ea157eff9","status":"passed","time":{"start":1689957221816,"stop":1689957222401,"duration":585}},{"uid":"ea995a3961190ad7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/815//#testresult/ea995a3961190ad7","status":"passed","time":{"start":1689957141343,"stop":1689957142156,"duration":813}}]},"tags":[]},"source":"82a202177bc159f2.json","parameterValues":["StHelensBC"]}