{"uid":"3530e10637a8b4dd","name":"Validate Council Output [DerbyshireDalesDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"9239389a2bc21b81d8e3ab51bc478351","time":{"start":1690076549191,"stop":1690076554417,"duration":5226},"status":"failed","statusMessage":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","statusTrace":"fixturefunc = <function validate_json_step at 0x7f376f57a8e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DerbyshireDalesDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3765d25d90>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:73: in validate_json_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:68: in validate_json_step\n    valid_json = file_handler.validate_json(context.parse_result)\nuk_bin_collection/tests/step_defs/step_helpers/file_handler.py:28: in validate_json\n    json.loads(json_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = None, cls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not NoneType\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/json/__init__.py:339: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","statusTrace":"fixturefunc = <function validate_json_step at 0x7f376f57a8e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[DerbyshireDalesDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3765d25d90>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:73: in validate_json_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:68: in validate_json_step\n    valid_json = file_handler.validate_json(context.parse_result)\nuk_bin_collection/tests/step_defs/step_helpers/file_handler.py:28: in validate_json\n    json.loads(json_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = None, cls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not NoneType\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/json/__init__.py:339: TypeError","steps":[{"name":"Given the council: DerbyshireDalesDistrictCouncil","time":{"start":1690076549191,"stop":1690076549191,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from DerbyshireDalesDistrictCouncil","time":{"start":1690076549192,"stop":1690076554416,"duration":5224},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1690076554416,"stop":1690076554417,"duration":1},"status":"failed","statusMessage":"the JSON object must be str, bytes or bytearray, not NoneType","statusTrace":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az812-832"},{"name":"thread","value":"2253-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DerbyshireDalesDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":5,"unknown":0,"total":8},"items":[{"uid":"7c3531d8f3647931","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/821//#testresult/7c3531d8f3647931","status":"failed","statusDetails":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","time":{"start":1690027245775,"stop":1690027249359,"duration":3584}},{"uid":"14b8a13983bea3cb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/820//#testresult/14b8a13983bea3cb","status":"passed","time":{"start":1690025677081,"stop":1690025681641,"duration":4560}},{"uid":"a8a79461bf378466","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/817//#testresult/a8a79461bf378466","status":"passed","time":{"start":1689989712671,"stop":1689989719469,"duration":6798}},{"uid":"328c0441414e57e1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/816//#testresult/328c0441414e57e1","status":"passed","time":{"start":1689957132969,"stop":1689957136907,"duration":3938}},{"uid":"35859b7428844f94","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/815//#testresult/35859b7428844f94","status":"passed","time":{"start":1689957015577,"stop":1689957020628,"duration":5051}},{"uid":"1ebc154116e7cd3b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/814//#testresult/1ebc154116e7cd3b","status":"failed","statusDetails":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"ctl00_ContentPlaceHolder1_FF2924TB\"]\"}\n  (Session info: headless chrome=114.0.5735.198)\nStacktrace:\n#0 0x55ccdd39a4e3 <unknown>\n#1 0x55ccdd0c9c76 <unknown>\n#2 0x55ccdd105c96 <unknown>\n#3 0x55ccdd105dc1 <unknown>\n#4 0x55ccdd13f7f4 <unknown>\n#5 0x55ccdd12503d <unknown>\n#6 0x55ccdd13d30e <unknown>\n#7 0x55ccdd124de3 <unknown>\n#8 0x55ccdd0fa2dd <unknown>\n#9 0x55ccdd0fb34e <unknown>\n#10 0x55ccdd35a3e4 <unknown>\n#11 0x55ccdd35e3d7 <unknown>\n#12 0x55ccdd368b20 <unknown>\n#13 0x55ccdd35f023 <unknown>\n#14 0x55ccdd32d1aa <unknown>\n#15 0x55ccdd3836b8 <unknown>\n#16 0x55ccdd383847 <unknown>\n#17 0x55ccdd393243 <unknown>\n#18 0x7fe6e60a1b43 <unknown>","time":{"start":1689903450280,"stop":1689903453216,"duration":2936}},{"uid":"70683edf8ad29eb2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/813//#testresult/70683edf8ad29eb2","status":"passed","time":{"start":1689840882026,"stop":1689840889361,"duration":7335}}]},"tags":[]},"source":"3530e10637a8b4dd.json","parameterValues":["DerbyshireDalesDistrictCouncil"]}