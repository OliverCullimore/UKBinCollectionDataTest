{"uid":"cae29c8eef320a45","name":"Validate Council Output [LeedsCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"973eb3b9bc5dfa31c9d5412a22fe2eb5","time":{"start":1690076561139,"stop":1690076699798,"duration":138659},"status":"failed","statusMessage":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","statusTrace":"fixturefunc = <function validate_json_step at 0x7f376f57a8e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[LeedsCityCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3765f67d90>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:73: in validate_json_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:68: in validate_json_step\n    valid_json = file_handler.validate_json(context.parse_result)\nuk_bin_collection/tests/step_defs/step_helpers/file_handler.py:28: in validate_json\n    json.loads(json_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = None, cls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not NoneType\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/json/__init__.py:339: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","statusTrace":"fixturefunc = <function validate_json_step at 0x7f376f57a8e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[LeedsCityCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3765f67d90>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:909: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:73: in validate_json_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:68: in validate_json_step\n    valid_json = file_handler.validate_json(context.parse_result)\nuk_bin_collection/tests/step_defs/step_helpers/file_handler.py:28: in validate_json\n    json.loads(json_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = None, cls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not NoneType\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/json/__init__.py:339: TypeError","steps":[{"name":"Given the council: LeedsCityCouncil","time":{"start":1690076561139,"stop":1690076561139,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from LeedsCityCouncil","time":{"start":1690076561140,"stop":1690076699797,"duration":138657},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Then the result is valid json","time":{"start":1690076699798,"stop":1690076699798,"duration":0},"status":"failed","statusMessage":"the JSON object must be str, bytes or bytearray, not NoneType","statusTrace":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az812-832"},{"name":"thread","value":"2253-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LeedsCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":8},"items":[{"uid":"f442b58d1f59dbb3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/821//#testresult/f442b58d1f59dbb3","status":"failed","statusDetails":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","time":{"start":1690027286386,"stop":1690027418250,"duration":131864}},{"uid":"50df6c5b3914ef3c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/820//#testresult/50df6c5b3914ef3c","status":"passed","time":{"start":1690025724983,"stop":1690025912303,"duration":187320}},{"uid":"167e953270183e2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/817//#testresult/167e953270183e2","status":"passed","time":{"start":1689989727056,"stop":1689989969683,"duration":242627}},{"uid":"b6e97a085cf5277a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/816//#testresult/b6e97a085cf5277a","status":"passed","time":{"start":1689957142880,"stop":1689957281426,"duration":138546}},{"uid":"f49b5160ca240658","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/815//#testresult/f49b5160ca240658","status":"passed","time":{"start":1689957027201,"stop":1689957215578,"duration":188377}},{"uid":"250dae5a6be25ccb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/814//#testresult/250dae5a6be25ccb","status":"passed","time":{"start":1689903459712,"stop":1689903677865,"duration":218153}},{"uid":"1fbf3e7b65818d15","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/813//#testresult/1fbf3e7b65818d15","status":"passed","time":{"start":1689840896412,"stop":1689841030794,"duration":134382}}]},"tags":[]},"source":"cae29c8eef320a45.json","parameterValues":["LeedsCityCouncil"]}