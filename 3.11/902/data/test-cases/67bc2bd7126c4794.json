{"uid":"67bc2bd7126c4794","name":"Validate Council Output [CharnwoodBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"801248c9ab954856945dc1ac5bef1fab","time":{"start":1694394797534,"stop":1694394799918,"duration":2384},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\n_pytest_bdd_example = {'council': 'CharnwoodBoroughCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"request = <FixtureRequest for <Function test_scenario_outline[CharnwoodBoroughCouncil]>>\n_pytest_bdd_example = {'council': 'CharnwoodBoroughCouncil'}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nuk_bin_collection/tests/step_defs/test_validate_council.py:62: in scrape_step\n    raise (err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:58: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:71: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:59: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:65: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CharnwoodBoroughCouncil.py:31: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%a %d %b'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council: CharnwoodBoroughCouncil","time":{"start":1694394797534,"stop":1694394797535,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When we scrape the data from CharnwoodBoroughCouncil","time":{"start":1694394797535,"stop":1694394799918,"duration":2383},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%a %d %b'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az171-495"},{"name":"thread","value":"2084-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CharnwoodBoroughCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":57,"unknown":0,"total":68},"items":[{"uid":"b724b303e9e4f9f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/901//#testresult/b724b303e9e4f9f0","status":"passed","time":{"start":1694365119795,"stop":1694365121702,"duration":1907}},{"uid":"c7477dfac3d054bb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/899//#testresult/c7477dfac3d054bb","status":"passed","time":{"start":1694308578484,"stop":1694308580221,"duration":1737}},{"uid":"d71e215283f6f1eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/891//#testresult/d71e215283f6f1eb","status":"passed","time":{"start":1694240242929,"stop":1694240244290,"duration":1361}},{"uid":"f5a4272a4caf366f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/890//#testresult/f5a4272a4caf366f","status":"passed","time":{"start":1694221816183,"stop":1694221817844,"duration":1661}},{"uid":"a8425f828bb4a09f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/889//#testresult/a8425f828bb4a09f","status":"passed","time":{"start":1694135564104,"stop":1694135565776,"duration":1672}},{"uid":"ffd0f54ad15504e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/888//#testresult/ffd0f54ad15504e5","status":"passed","time":{"start":1694049152441,"stop":1694049153713,"duration":1272}},{"uid":"892d750e2dc2a317","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/887//#testresult/892d750e2dc2a317","status":"passed","time":{"start":1693962721170,"stop":1693962722553,"duration":1383}},{"uid":"a6c9a186d97a8f12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/885//#testresult/a6c9a186d97a8f12","status":"passed","time":{"start":1693876250108,"stop":1693876251482,"duration":1374}},{"uid":"138caa7794f5f9dd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/884//#testresult/138caa7794f5f9dd","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1693789990345,"stop":1693789991868,"duration":1523}},{"uid":"76820105f7df1c66","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/883//#testresult/76820105f7df1c66","status":"passed","time":{"start":1693703740401,"stop":1693703742561,"duration":2160}},{"uid":"e98db90d654cd729","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/882//#testresult/e98db90d654cd729","status":"passed","time":{"start":1693616972733,"stop":1693616974337,"duration":1604}},{"uid":"b7b66a896fba8816","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/881//#testresult/b7b66a896fba8816","status":"passed","time":{"start":1693530999906,"stop":1693531001055,"duration":1149}},{"uid":"a3c03e3af3055e50","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/880//#testresult/a3c03e3af3055e50","status":"passed","time":{"start":1693444339885,"stop":1693444341496,"duration":1611}},{"uid":"71cfbc9b15421ac8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/879//#testresult/71cfbc9b15421ac8","status":"passed","time":{"start":1693357914623,"stop":1693357916271,"duration":1648}},{"uid":"f43e6cf9248c3f8e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/878//#testresult/f43e6cf9248c3f8e","status":"passed","time":{"start":1693271535073,"stop":1693271536488,"duration":1415}},{"uid":"8e2ef6bd5ed34f4b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/877//#testresult/8e2ef6bd5ed34f4b","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%a %d %b'","time":{"start":1693185150244,"stop":1693185151732,"duration":1488}},{"uid":"a9cbc7f04178c7a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/876//#testresult/a9cbc7f04178c7a0","status":"passed","time":{"start":1693098921962,"stop":1693098923309,"duration":1347}},{"uid":"2d3b2d0e87783e79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/875//#testresult/2d3b2d0e87783e79","status":"passed","time":{"start":1693012137644,"stop":1693012139344,"duration":1700}},{"uid":"9b1d45d8822536e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/874//#testresult/9b1d45d8822536e","status":"passed","time":{"start":1692925920809,"stop":1692925922696,"duration":1887}},{"uid":"4fe4f9dece39c81","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/873//#testresult/4fe4f9dece39c81","status":"passed","time":{"start":1692839426322,"stop":1692839427720,"duration":1398}}]},"tags":[]},"source":"67bc2bd7126c4794.json","parameterValues":["CharnwoodBoroughCouncil"]}